/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */html{font-family:sans-serif;line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,optgroup,select,textarea{font:inherit;margin:0}optgroup{font-weight:700}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}blockquote,body,dd,dl,fieldset,h1,h2,h3,h4,h5,h6,hr,legend,li figure,ol,p,pre,ul{margin:0;padding:0;font-weight:400}li>ol,li>ul{margin-bottom:0}table{border-collapse:collapse;border-spacing:0}fieldset{min-width:0;border:0}html{box-sizing:border-box}*,:after,:before{box-sizing:inherit}html{min-height:100%;font-family:Open Sans,sans-serif;font-size:1em;line-height:1.5;color:#f3f3f3;overflow-y:scroll}body{background-color:#4e4c4d}html{font-size:100%;line-height:1.5}@media (min-width:37.5em){html{font-size:112.5%}}@media (min-width:49.6875em){html{font-size:112.5%}}@media (min-width:56.875em){html{font-size:125%}}@media (min-width:70.3125em){html{font-size:125%}}h1,h2,h3,h4,h5,h6{font-family:Bitter,serif;color:#363435}p{margin-bottom:1.5rem;color:#4e4c4d}p:last-child{margin-bottom:0}h1{font-size:1.33333rem}h1,h2{line-height:1.2}h2{font-size:1.77778rem}h3,h4,h5,h6{font-size:1.33333rem;line-height:1.2}p{font-family:Open Sans,sans-serif;color:#f3f3f3}.l-container{padding-left:.625em;padding-right:.625em;margin:0 auto;max-width:40em}.c-header{background-color:#363435;background-image:url(images/logo.png);background-repeat:no-repeat;background-position:0;height:100px;padding-left:100px;padding-right:10px;border-bottom:10px solid #bf343d;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.c-header__heading{color:#f4f3ba;text-align:right;text-transform:uppercase}.c-searchform{padding:.625em 0 1.25em;background-color:#f3f3f3;border-radius:10px}.c-searchform__container{margin:15px auto 10px;max-width:40em}.c-searchform__label{display:block;font-family:Bitter,serif;font-size:1.33333em;color:#363435;text-align:center}.c-searchform__inputs{display:-webkit-box;display:-ms-flexbox;display:flex;max-width:30em;margin:0 auto;padding:0 .625em}.c-searchform__input{min-width:0;margin-right:10px;background-color:#fff;border:1px solid #4e4c4d;border-radius:5px;font-family:Bitter,serif;-webkit-box-flex:1;-ms-flex:1;flex:1;-webkit-transition:border .3s,-webkit-box-shadow .3s;transition:box-shadow .3s,border .3s}.c-searchform__input:focus{outline:none;border:1px solid #363435;box-shadow:0 0 5px 1px #363435}.c-searchform__submit{background-color:#bf343d;border:1px solid #4e4c4d;border-radius:5px;font-family:Bitter,serif;font-weight:400;color:#f4f3ba}.c-search{padding:0 .625em 1.25em}.c-search__heading{color:#f4f3ba;font-size:1.77778em;text-align:center}.c-search__list{border:2px solid #363435;text-align:center}.c-search__artist{position:relative;padding:.75rem;background-color:#bf343d;color:#fff;font-family:Bitter,serif;margin-bottom:0}.c-search__artist:after{position:absolute;content:"";pointer-events:none;left:50%;width:10px;height:10px;-webkit-transform:translateX(-50%) rotate(45deg);transform:translateX(-50%) rotate(45deg);bottom:-5px;z-index:1;background:inherit}.c-search__title{list-style:none;margin:0;padding:.75rem;font-family:Open Sans,sans-serif;background-color:#000}.c-search__title:nth-child(odd){background-color:#f3f3f3;color:#4e4c4d}.c-search__title:nth-child(even){background-color:#363435;color:#fff}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
